<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.intigna.services.ui</groupId>
  <artifactId>intigna-devops-ui</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>intigna-devops-ui</name>
  <description>Devops Services Management AngularJS UI </description>

  <!-- Brings in the repos -->
  <parent>
    <groupId>com.intigna.build</groupId>
    <artifactId>parent-pom</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <scm>
    <connection>scm:git:git@github.com:Intigna/intigna-devops-ui.git</connection>
    <developerConnection>scm:git:git@github.com:Intigna/intigna-devops-ui.git</developerConnection>
    <url>https://github.com/Intigna/intigna-devops-ui</url>
  </scm>


  <build>
    <plugins>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-maven-plugin</artifactId>
        <version>${fabric8.version}</version>
        <executions>
          <execution>
            <id>json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>json</goal>
            </goals>
          </execution>
          <execution>
            <id>attach</id>
            <phase>package</phase>
            <goals>
              <goal>attach</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <images>
            <image>
              <name>${docker.image}</name>
              <build>
                <from>${docker.from}</from>
                <maintainer>Kurt Stam</maintainer>
                <tags><tag>${project.version}</tag></tags>
                <cmd>
                  <exec>
                    <arg>npm</arg>
                    <arg>start</arg>
                  </exec>
                </cmd>
                <assembly>
                  <mode>dir</mode>
                  <basedir>/site</basedir>
                  <descriptor>assembly.xml</descriptor>
                </assembly>
                <workdir>/site</workdir>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
    </plugins>

  </build>

  <properties>

    <fabric8.label.provider>sematree</fabric8.label.provider>
    <fabric8.annotations.service.api.service.kubernetes.io.protocol>REST</fabric8.annotations.service.api.service.kubernetes.io.protocol>
    <fabric8.annotations.service.api.service.kubernetes.io.path>app</fabric8.annotations.service.api.service.kubernetes.io.path>
    <fabric8.annotations.service.apiman.io.publish>publish</fabric8.annotations.service.apiman.io.publish>

    <fabric8.version>2.2.183</fabric8.version>
    <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>

    <docker.from>kurtstam/centos7-npm:v1.0.0.0</docker.from>
    <fabric8.dockerUser>sematree/</fabric8.dockerUser>
    <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
    <docker.assemblyDescriptorRef>rootWar</docker.assemblyDescriptorRef>
    <docker.port.container.http>8080</docker.port.container.http>

    <fabric8.service.name>intigna-devops-ui</fabric8.service.name>
    <fabric8.service.port>8000</fabric8.service.port>
    <fabric8.service.containerPort>8000</fabric8.service.containerPort>

    <fabric8.label.component>${project.artifactId}</fabric8.label.component>
    <fabric8.label.container>npm</fabric8.label.container>
    <fabric8.label.group>ui</fabric8.label.group>
    <fabric8.iconRef>node</fabric8.iconRef>

    <fabric8.volume.project.secret>intigna-devops-ui</fabric8.volume.project.secret>
    <fabric8.volume.project.mountPath>/site/app/appConfig</fabric8.volume.project.mountPath>

  </properties>



  <!--
      Default sample commands:

      mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
      mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
      mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry

      For individual goal usage please consult the fabric8 documentation
    -->
  <profiles>
    <profile>
      <id>f8-build</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-deploy</id>
      <properties>
        <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-local-deploy</id>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
      <build>
        <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
      </build>
    </profile>
  </profiles>

</project>
